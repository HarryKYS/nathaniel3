WITH accum AS (
    SELECT
        aa.customeraddressid,
        MAX(aa.cnt) AS last_wad
    FROM (
        SELECT
            a.*,
            SUM(a.rnum) OVER (PARTITION BY a.customeraddressid ORDER BY DATE(a.received_datetime) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cnt
        FROM (
            SELECT
                w.*,
                ROW_NUMBER() OVER (PARTITION BY customeraddressid, workdate, loginid ORDER BY received_datetime) AS rnum
            FROM
                sb_logistics.wad_cs_myc w
            WHERE
                DATE(w.received_datetime) BETWEEN DATE_ADD('day', -91, DATE('${from_date}')) AND DATE_ADD('day', -1, DATE('${from_date}'))
        ) a
        WHERE
            a.rnum = 1
    ) aa
    GROUP BY 1
)

SELECT
    c.flag,
    c.inquiryid,
    c.code,
    LEFT(c.received_datetime, 19) AS received_datetime,
    c.workdate,
    c.region,
    c.area,
    c.camp,
    c.memberid,
    c.orderid,
    c.customeraddressid,
    c.invoicenumber,
    c.delivery_completed_at,
    c.wave,
    c.workertype,
    c.flextype,
    c.subroute,
    c.loginid,
    CASE WHEN dci.invoicenumber IS NULL THEN 'N' ELSE 'Y' END AS redelivery_success,
    CASE WHEN ac.last_wad IS NULL THEN 0 ELSE ac.last_wad END AS last_90d_wad,
    c.rnum_order AS from_to_wad,
    (ac.last_wad + c.rnum_order) AS wad_cnt
FROM (
    SELECT
        b.*,
        CASE WHEN dci.invoicenumber IS NULL THEN 'N' ELSE 'Y' END AS redelivery_success,
        CASE WHEN ac.last_wad IS NULL THEN 0 ELSE ac.last_wad END AS last_wad,
        ROW_NUMBER() OVER (PARTITION BY b.customeraddressid ORDER BY b.received_datetime) AS rnum_order
    FROM (
        SELECT
            a.*,
            ROW_NUMBER() OVER (PARTITION BY customeraddressid, workdate, loginid ORDER BY received_datetime) AS rnum,
            ROW_NUMBER() OVER (PARTITION BY inquiryid, invoicenumber ORDER BY delivery_completed_at) AS invoice_num
        FROM
            sb_logistics.wad_cs_myc w
        WHERE
            DATE(w.received_datetime) BETWEEN DATE('${from_date}') AND DATE('${to_date}')
    ) a
    WHERE
        a.rnum = 1
        AND a.invoice_num = 1 -- Deduplicate된 것 가져오기
) b
LEFT JOIN accum ac ON (ac.customeraddressid = b.customeraddressid)
LEFT JOIN ods.driver_contact_invoices dci ON (dci.invoicenumber = b.invoicenumber AND dci.drivercontactinvoicestatus = 'RDSOLVED');

""" WITH 절과 accum 서브쿼리:

WITH 절을 사용하여 accum이라는 임시 테이블을 생성합니다.
accum 서브쿼리는 sb_logistics.wad_cs_myc 테이블에서 데이터를 조회하고, received_datetime이 지정된 기간 사이에 있는 레코드를 필터링합니다.
서브쿼리 내부에서는 각 customeraddressid, workdate, loginid 그룹 내에서 received_datetime에 따라 오름차순으로 순번을 부여합니다.
그룹 내의 누적된 순번을 계산하기 위해 SUM 함수와 OVER 절을 사용합니다.
마지막으로, 순번이 1인 레코드만 선택하고, customeraddressid를 기준으로 그룹화하여 각 그룹의 최대 누적값을 구합니다.
메인 쿼리:

메인 쿼리는 다양한 테이블과 조인하여 결과를 검색합니다.
각 테이블은 알려진 데이터베이스에서 가져온 것으로 가정합니다.
주요 SELECT 문에서는 다양한 칼럼을 선택하고, CASE 문을 사용하여 특정 조건에 따라 값을 설정합니다.
ROW_NUMBER 함수를 사용하여 특정 기준에 따라 각 레코드에 순번을 할당합니다.
accum 서브쿼리의 결과와 조인하여 필요한 데이터를 가져옵니다.
LEFT JOIN을 사용하여 다른 테이블과의 연결을 수행합니다.
위의 설명은 주어진 코드의 일부분을 기반으로 한 것이며, 실제 데이터 모델과 요구사항에 따라 수정해야 할 수도 있습니다. 쿼리의 목적과 필요한 결과를 이해한 후에는 각 부분을 적절하게 조정하여 원하는 결과를 얻을 수 있도록 쿼리를 수정해야 합니다.
테이블:

sb_logistics.wad_cs_myc
ods.driver_contact_invoices
컬럼:

sb_logistics.wad_cs_myc 테이블:

customeraddressid
received_datetime
workdate
loginid
inquiryid
invoicenumber
delivery_completed_at
wave
workertype
flextype
subroute
flag
code
region
area
camp
memberid
orderid
rnum_order
ods.driver_contact_invoices 테이블:

invoicenumber
drivercontactinvoicestatus
조인:

accum 서브쿼리 결과와 메인 쿼리의 b 서브쿼리 결과는 customeraddressid 컬럼을 기준으로 레프트 조인됩니다.
ods.driver_contact_invoices 테이블은 b.invoicenumber 컬럼과 ods.driver_contact_invoices.invoicenumber 컬럼을 기준으로 레프트 조인됩니다.
위 정보를 기반으로 쿼리를 분석하고 이해하시기 바랍니다. 그러나 제공된 코드는 완전하지 않으며, 사용되는 테이블 및 컬럼에 대한 완전한 컨텍스트를 알 수 없으므로 실제 데이터 모델 및 요구사항에 맞게 수정해야 할 수 있습니다.

 """
